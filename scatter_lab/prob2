# 나의 풀이
def solution(C, F, X):
    """
    Args:
        C: cost per staff
        F: production per minute per staff
        X: target production
    """
    
    n = 1  # number of staff
    
    prev_t = 0
    prev_result = X / 2
    while True:
        next_t = prev_t + ( C / (2 + (n-1)*F) )
        next_result = next_t + ( X / (2 + n*F) )
        
        if prev_result <= next_result:
            return round(prev_result, 6)
        
        else:
            prev_t = next_t
            prev_result = next_result
            n += 1

# 회고
- 함수 인자들의 변수명이 가독성이 떨어지는 것 같아서 인자들에 대한 간단한 주석을 추가했다.
- staff가 계속해서 증가할 때, X를 생산하기 위한 시간은 감소하는 추세를 보이다가 어느 지점 이후로 다시 증가하는 추세를 보이는데, 이 최적점을 구하는 것이 핵심이다.
- 어떤 시점에서 staff가 n명일 때, staff를 한명 더 구하기 위해서는 2(T_n - T_n-1) + (n-1)F(T_n - T_n-1) = C 식을 통해 구한 T_n 시간만큼 생산을 해야한다.
- 예시) staff가 0명인 시점에서, staff를 한명 더 구하기 위해서는 2T = C, 즉 T = C/2 시간동안 생산해야 한다.
- 또한 staff를 한명 더 구했을 때 X만큼 생산하는 데 걸리는 시간은 2(T - Tn) + nF(T - Tn) = X를 풀었을 대 나오는 T가 된다.
- 예시) staff가 1명이 되었을 때, X만큼 생산하는 데 걸리는 시간은 2(T - C/2) + F(T - C/2) = X를 풀었을 때 나오는 T = (2 / C) + (X / (2 + F))이 된다.
- 부가설명) staff가 1명 늘었다는 것은 그 시점에 staff의 임금을 막 마련해서 다 줬다는 것이고 생산량은 0이라는 것을 의미한다. 따라서 Tn까지의 생산량은 없어진다.
- 이 과정을 while문을 통해 반복하며 최적의 staff 수와 최적의 소요 시간을 구하면 된다.
