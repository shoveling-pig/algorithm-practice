# 나의 풀이
MAX = 0

def solution(triangle):
    
    def dfs(layer, order, result):
        global MAX
        result += triangle[layer][order]            
        if layer == len(triangle) - 1:
            if result > MAX:
                MAX = result
            return
        for next_order in range(order, order+2):
            dfs(layer+1, next_order, result)
            
    global MAX
    dfs(0, 0, 0)
    return MAX

# 한줄평
정확하지만 속도가 너무 느리다. 확인해보지 않아도 되는 경우를 제대로 걸러내지 못한 것 같다.


# 다른 풀이 1
def solution(triangle):
    for i in range(1, len(triangle)):
        for j in range(i+1):
            if j==0:
                triangle[i][j] += triangle[i-1][j]
            elif j==i:
                triangle[i][j] += triangle[i-1][j-1]
            else:
                triangle[i][j] += max(triangle[i-1][j], triangle[i-1][j-1])
    return max(triangle[-1])
    
# 한줄평
재귀를 사용하지 않고 구현했다. 삼각형의 끝터리 부분과 안쪽 부분을 구별했고, 위의 값을 아래 값에 더해주는 과정을 반복하는 방식으로 문제를 해결하였다.
출처) https://codedrive.tistory.com/49
